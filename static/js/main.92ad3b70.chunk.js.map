{"version":3,"sources":["images/logo.svg","components/Navbar.js","components/Download.js","components/Video.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","data-toggle","data-target","id","Link","to","src","logo","width","height","Download","class","Video","frameborder","allow","allowfullscreen","App","components_Navbar","Route","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","HashRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uPCqCzBC,EAlCA,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACbH,EAAAC,EAAAC,cAAA,UACEC,UAAU,iBACVC,cAAY,WACZC,cAAY,oBAEZL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAGlBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BG,GAAG,mBAC3CN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,IAAIL,UAAU,gBACrBH,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,IAAMC,MAAM,KAAKC,OAAO,QAEpCZ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,aAEAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,IAAIL,UAAU,YAAvB,SAIFH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,YAAYL,UAAU,YAA/B,iBCLGU,EApBE,WACf,OACEb,EAAAC,EAAAC,cAAA,WAASC,UAAU,4BACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,KAAGY,MAAM,0BAEXd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,KAAGY,MAAM,wBAEXd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,KAAGY,MAAM,4BCENC,EAdD,WACZ,OACEf,EAAAC,EAAAC,cAAA,WAASC,UAAU,8BACjBH,EAAAC,EAAAC,cAAA,UACES,MAAM,MACNC,OAAO,MACPH,IAAI,4CACJO,YAAY,IACZC,MAAM,0EACNC,iBAAe,MCURC,mLAdX,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACkB,EAAD,OAEFpB,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjCf,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAWX,aAT3BY,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXNC,IAASC,OACPhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACEjC,EAAAC,EAAAC,cAACgC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.92ad3b70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport logo from \"../images/logo.svg\";\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n      <button\n        className=\"navbar-toggler\"\n        data-toggle=\"collapse\"\n        data-target=\"#collapse_target\"\n      >\n        <span className=\"navbar-toggler-icon\" />\n      </button>\n\n      <div className=\"collapse navbar-collapse\" id=\"collapse_target\">\n        <Link to=\"/\" className=\"navbar-brand\">\n          <img src={logo} width=\"30\" height=\"30\" />\n        </Link>\n        <span className=\"navbar-text\">Silverkey</span>\n\n        <ul className=\"navbar-nav navbar-right ml-auto\">\n          <li className=\"nav-item\">\n            <Link to=\"/\" className=\"nav-link\">\n              Home\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link to=\"/download\" className=\"nav-link\">\n              Download\n            </Link>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nconst Download = () => {\n  return (\n    <section className=\"bg-light text-muted py-5\">\n      <div className=\"container text-center\">\n        <div className=\"row\">\n          <div className=\"col-sm-4 py-3\">\n            <i class=\"fab fa-windows fa-4x\" />\n          </div>\n          <div className=\"col-sm-4 py-3\">\n            <i class=\"fab fa-linux fa-4x\" />\n          </div>\n          <div className=\"col-sm-4 py-3\">\n            <i class=\"fab fa-apple fa-4x\" />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Download;\n","import React from \"react\";\n\nconst Video = () => {\n  return (\n    <section className=\"container text-center py-5\">\n      <iframe\n        width=\"560\"\n        height=\"315\"\n        src=\"https://www.youtube.com/embed/N0h1X2Kua7E\"\n        frameborder=\"0\"\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n        allowfullscreen\n      />\n    </section>\n  );\n};\nexport default Video;\n","import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport Download from \"./components/Download\";\nimport Video from \"./components/Video\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <Navbar />\n        </header>\n        <section>\n          <Route exact path=\"/\" component={Video} />\n          <Route path=\"/download\" component={Download} />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}